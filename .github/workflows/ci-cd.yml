name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest 
    env:
      EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      EC2_URL: ${{ secrets.EC2_URL }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build and push Docker image to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nader-backend:latest

      # Step 7: Setup SSH for EC2
      - name: Setup SSH for EC2
        uses: omarhosny206/setup-ssh-for-ec2@v1.0.0
        with:
          EC2_SSH_PRIVATE_KEY: $EC2_SSH_PRIVATE_KEY
          EC2_URL: $EC2_URL

      # Step 8: Deploy to EC2
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_URL << 'ENDSSH'
            set -e

            # Clean up EC2 instance
            echo 'Cleaning up EC2 instance...'
            docker image prune -f || { echo 'Docker image prune failed'; exit 1; }

            # Check if Docker is installed
            if ! command -v docker &> /dev/null
            then 
              sudo apt-get update
              sudo apt-get install -y docker.io
            fi
            
            echo 'Pulling Docker image...'
            docker pull ${{ secrets.DOCKER_USERNAME }}/nader-backend:latest || { echo 'Docker pull failed'; exit 1; }
    
            echo 'Stopping existing container...'
            docker stop nader-backend || true 
            docker rm nader-backend || true
    
            echo 'Running new container...'
            docker run -d -p 8000:8000 --name nader-backend \
              -e MONGO_URL='${{ secrets.MONGO_URL }}' \
              -e ENV='${{ secrets.ENV }}' \
              -e PORT='${{ secrets.PORT }}' \
              -e AUTH_SECRET='${{ secrets.AUTH_SECRET }}' \
              -e SHOPIFY_ADMIN_API_URL='${{ secrets.SHOPIFY_ADMIN_API_URL }}' \
              -e SHOPIFY_STOREFRONT_API_URL='${{ secrets.SHOPIFY_STOREFRONT_API_URL }}' \
              -e X_SHOPIFY_STOREFRONT_ACCESS_TOKEN='${{ secrets.X_SHOPIFY_STOREFRONT_ACCESS_TOKEN }}' \
              -e MOBILE_APP_API_SECRET='${{ secrets.MOBILE_APP_API_SECRET }}' \
              -e AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
              -e AWS_REGION='${{ secrets.AWS_REGION }}' \
              -e AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
              -e AWS_BUCKET_NAME='${{ secrets.AWS_BUCKET_NAME }}' \
              -e AWS_BUCKET_URL='${{ secrets.AWS_BUCKET_URL }}' \
              ${{ secrets.DOCKER_USERNAME }}/nader-backend:latest || { echo 'Docker run failed'; exit 1; }

            echo 'Container running successfully'
    
            # Prune unused Docker resources to free up space
            echo "Cleaning up unused Docker resources..."
            docker system prune -af --volumes || { echo "Docker system prune failed"; exit 1; }
            # Clean up temporary files and logs
            echo "Cleaning up temporary files and logs..."
            sudo rm -rf /tmp/*
            sudo truncate -s 0 /var/log/*.log
            echo "Cleaning up log files..."
            sudo find /var/log/ -type f -name "*.log" -exec truncate -s 0 {} \;
            echo "Checking disk usage after cleanup..."
            df -h

          ENDSSH